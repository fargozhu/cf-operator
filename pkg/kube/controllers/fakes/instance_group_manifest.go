// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"code.cloudfoundry.org/cf-operator/pkg/bosh/manifest"
	"code.cloudfoundry.org/cf-operator/pkg/kube/controllers/boshdeployment"
)

type FakeInstanceGroupManifest struct {
	InstanceGroupManifestStub        func(context.Context, string, string, string) (*manifest.Manifest, error)
	instanceGroupManifestMutex       sync.RWMutex
	instanceGroupManifestArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	instanceGroupManifestReturns struct {
		result1 *manifest.Manifest
		result2 error
	}
	instanceGroupManifestReturnsOnCall map[int]struct {
		result1 *manifest.Manifest
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInstanceGroupManifest) InstanceGroupManifest(arg1 context.Context, arg2 string, arg3 string, arg4 string) (*manifest.Manifest, error) {
	fake.instanceGroupManifestMutex.Lock()
	ret, specificReturn := fake.instanceGroupManifestReturnsOnCall[len(fake.instanceGroupManifestArgsForCall)]
	fake.instanceGroupManifestArgsForCall = append(fake.instanceGroupManifestArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("InstanceGroupManifest", []interface{}{arg1, arg2, arg3, arg4})
	fake.instanceGroupManifestMutex.Unlock()
	if fake.InstanceGroupManifestStub != nil {
		return fake.InstanceGroupManifestStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.instanceGroupManifestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeInstanceGroupManifest) InstanceGroupManifestCallCount() int {
	fake.instanceGroupManifestMutex.RLock()
	defer fake.instanceGroupManifestMutex.RUnlock()
	return len(fake.instanceGroupManifestArgsForCall)
}

func (fake *FakeInstanceGroupManifest) InstanceGroupManifestCalls(stub func(context.Context, string, string, string) (*manifest.Manifest, error)) {
	fake.instanceGroupManifestMutex.Lock()
	defer fake.instanceGroupManifestMutex.Unlock()
	fake.InstanceGroupManifestStub = stub
}

func (fake *FakeInstanceGroupManifest) InstanceGroupManifestArgsForCall(i int) (context.Context, string, string, string) {
	fake.instanceGroupManifestMutex.RLock()
	defer fake.instanceGroupManifestMutex.RUnlock()
	argsForCall := fake.instanceGroupManifestArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeInstanceGroupManifest) InstanceGroupManifestReturns(result1 *manifest.Manifest, result2 error) {
	fake.instanceGroupManifestMutex.Lock()
	defer fake.instanceGroupManifestMutex.Unlock()
	fake.InstanceGroupManifestStub = nil
	fake.instanceGroupManifestReturns = struct {
		result1 *manifest.Manifest
		result2 error
	}{result1, result2}
}

func (fake *FakeInstanceGroupManifest) InstanceGroupManifestReturnsOnCall(i int, result1 *manifest.Manifest, result2 error) {
	fake.instanceGroupManifestMutex.Lock()
	defer fake.instanceGroupManifestMutex.Unlock()
	fake.InstanceGroupManifestStub = nil
	if fake.instanceGroupManifestReturnsOnCall == nil {
		fake.instanceGroupManifestReturnsOnCall = make(map[int]struct {
			result1 *manifest.Manifest
			result2 error
		})
	}
	fake.instanceGroupManifestReturnsOnCall[i] = struct {
		result1 *manifest.Manifest
		result2 error
	}{result1, result2}
}

func (fake *FakeInstanceGroupManifest) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.instanceGroupManifestMutex.RLock()
	defer fake.instanceGroupManifestMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeInstanceGroupManifest) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ boshdeployment.InstanceGroupManifest = new(FakeInstanceGroupManifest)
